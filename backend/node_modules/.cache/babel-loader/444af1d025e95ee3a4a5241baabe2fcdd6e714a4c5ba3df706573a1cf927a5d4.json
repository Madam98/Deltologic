{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"#ddd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let z = 0;\n  surface.forEach((y, i) => {\n    for (let j = 0; j < y; j++) {\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: x,\n        y: j,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 18\n      }, this));\n    }\n    x += 1;\n    z = 0;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cubes\n  }, void 0, false);\n};\n_c2 = Surface;\nconst Scene = () => {\n  _s();\n  const [surface, setSurface] = useState([]);\n  const inputRef = useRef(null);\n  const handleClick = () => {\n    var _inputRef$current;\n    const value = (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value;\n    if (value) {\n      const arr = value.split(\",\").map(Number);\n      setSurface(arr);\n    }\n  };\n};\n_s(Scene, \"lrRnTuKoZOmS8tcfBeaym+pf4zw=\");\n_c3 = Scene;\nexport default Scene;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Scene\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","Surface","_ref2","surface","cubes","forEach","i","j","push","_c2","Scene","_s","setSurface","inputRef","handleClick","_inputRef$current","value","current","arr","split","map","Number","_c3","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\n\r\ntype Props = {\r\n  surface: number[];\r\n};\r\n\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color=\"#ddd\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Surface = ({ surface }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n\r\n  let x = 0;\r\n  let z = 0;\r\n\r\n  surface.forEach((y, i) => {\r\n    for (let j = 0; j < y; j++) {\r\n      cubes.push(<Box key={`${i}-${j}`} x={x} y={j} z={z} />);\r\n    }\r\n\r\n    x += 1;\r\n    z = 0;\r\n  });\r\n\r\n  return <>{cubes}</>;\r\n};\r\n\r\nconst Scene = () => {\r\n  const [surface, setSurface] = useState<number[]>([]);\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleClick = () => {\r\n    const value = inputRef.current?.value;\r\n    if (value) {\r\n      const arr = value.split(\",\").map(Number);\r\n      setSurface(arr);\r\n    }\r\n  };\r\n};\r\nexport default Scene;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAOhD,MAAMC,GAAG,GAAGC,IAAA,IAAsD;EAAA,IAArD;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAuC,CAAC,GAAAH,IAAA;EAC3D,oBACEJ,OAAA;IAAMQ,QAAQ,EAAE,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAE;IAAAE,QAAA,gBACxBT,OAAA;MAAmBU,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCd,OAAA;MAAsBe,KAAK,EAAC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEX,CAAC;AAACE,EAAA,GAPIb,GAAG;AAST,MAAMc,OAAO,GAAGC,KAAA,IAAwB;EAAA,IAAvB;IAAEC;EAAe,CAAC,GAAAD,KAAA;EACjC,MAAME,KAAoB,GAAG,EAAE;EAE/B,IAAIf,CAAC,GAAG,CAAC;EACT,IAAIE,CAAC,GAAG,CAAC;EAETY,OAAO,CAACE,OAAO,CAAC,CAACf,CAAC,EAAEgB,CAAC,KAAK;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,CAAC,EAAEiB,CAAC,EAAE,EAAE;MAC1BH,KAAK,CAACI,IAAI,eAACxB,OAAA,CAACG,GAAG;QAAmBE,CAAC,EAAEA,CAAE;QAACC,CAAC,EAAEiB,CAAE;QAAChB,CAAC,EAAEA;MAAE,GAA7B,GAAEe,CAAE,IAAGC,CAAE,EAAC;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAAC,CAAC;IACzD;IAEAT,CAAC,IAAI,CAAC;IACNE,CAAC,GAAG,CAAC;EACP,CAAC,CAAC;EAEF,oBAAOP,OAAA,CAAAE,SAAA;IAAAO,QAAA,EAAGW;EAAK,gBAAG,CAAC;AACrB,CAAC;AAACK,GAAA,GAhBIR,OAAO;AAkBb,MAAMS,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACR,OAAO,EAAES,UAAU,CAAC,GAAG9B,QAAQ,CAAW,EAAE,CAAC;EAEpD,MAAM+B,QAAQ,GAAGhC,MAAM,CAAmB,IAAI,CAAC;EAE/C,MAAMiC,WAAW,GAAGA,CAAA,KAAM;IAAA,IAAAC,iBAAA;IACxB,MAAMC,KAAK,IAAAD,iBAAA,GAAGF,QAAQ,CAACI,OAAO,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBC,KAAK;IACrC,IAAIA,KAAK,EAAE;MACT,MAAME,GAAG,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MACxCT,UAAU,CAACM,GAAG,CAAC;IACjB;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CAZID,KAAK;AAAAY,GAAA,GAALZ,KAAK;AAaX,eAAeA,KAAK;AAAC,IAAAV,EAAA,EAAAS,GAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAd,GAAA;AAAAc,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}