{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\";\nimport * as THREE from \"three\";\nimport React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst boxArgs = [4, 2, 2];\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: boxArgs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineSegments\", {\n      geometry: edgesGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: \"white\",\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let middleColumnIndex = Math.floor(surface.length / 2); // Indeks środkowej kolumny\n  let centerX = 0; // Zdefiniowanie centerX\n\n  surface.forEach((height, i) => {\n    for (let j = 0; j < height; j++) {\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: x,\n        y: y,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 18\n      }, this));\n      y += boxArgs[1];\n      if (i === middleColumnIndex && j === Math.floor(height / 2)) {\n        centerX = x; // Ustawienie pozycji x środkowego sześcianu\n      }\n    }\n\n    y = 0;\n    x += boxArgs[0];\n  });\n  const numElements = cubes.length;\n  const surfaceWidth = numElements * boxArgs[0];\n  const surfaceHeight = surface.length * boxArgs[1];\n  let centerY = -surfaceHeight / 2;\n  let cameraDistance = Math.max(surfaceWidth, surfaceHeight) + numElements * boxArgs[2] + 10;\n  return {\n    centerX,\n    elements: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [cubes, /*#__PURE__*/_jsxDEV(\"mesh\", {\n        position: [centerX, centerY, 0],\n        children: [/*#__PURE__*/_jsxDEV(\"sphereBufferGeometry\", {\n          args: [0.2]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n          color: \"red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true),\n    width: surfaceWidth,\n    height: surfaceHeight,\n    distance: cameraDistance\n  };\n};\n_c2 = Surface;\nconst Scene = _ref3 => {\n  let {\n    surface\n  } = _ref3;\n  const {\n    centerX,\n    elements,\n    width,\n    height,\n    distance\n  } = Surface({\n    surface\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [centerX, -height / 2, distance],\n        zoom: 1\n      },\n      onCreated: _ref4 => {\n        let {\n          camera\n        } = _ref4;\n        camera.position.x = centerX;\n        camera.position.y = -height / 2;\n        camera.position.z = distance;\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), elements]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Scene;\nexport default Scene;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Scene\");","map":{"version":3,"names":["THREE","React","Canvas","jsxDEV","_jsxDEV","Fragment","_Fragment","boxArgs","edgesGeometry","EdgesGeometry","BoxGeometry","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","geometry","linewidth","_c","Surface","_ref2","surface","cubes","middleColumnIndex","Math","floor","length","centerX","forEach","height","i","j","push","numElements","surfaceWidth","surfaceHeight","centerY","cameraDistance","max","elements","width","distance","_c2","Scene","_ref3","camera","zoom","onCreated","_ref4","intensity","_c3","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\n\r\ntype Props = {\r\n  surface: number[];\r\n};\r\n\r\nconst boxArgs = [4, 2, 2];\r\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\r\n\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={boxArgs} />\r\n      <meshStandardMaterial color=\"gray\" />\r\n      <lineSegments geometry={edgesGeometry}>\r\n        <lineBasicMaterial color=\"white\" linewidth={2} />\r\n      </lineSegments>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Surface = ({ surface }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  let x = 0;\r\n  let y = 0;\r\n  let z = 0;\r\n\r\n  let middleColumnIndex = Math.floor(surface.length / 2); // Indeks środkowej kolumny\r\n  let centerX = 0; // Zdefiniowanie centerX\r\n\r\n  surface.forEach((height, i) => {\r\n    for (let j = 0; j < height; j++) {\r\n      cubes.push(<Box key={`${i}-${j}`} x={x} y={y} z={z} />);\r\n      y += boxArgs[1];\r\n\r\n      if (i === middleColumnIndex && j === Math.floor(height / 2)) {\r\n        centerX = x; // Ustawienie pozycji x środkowego sześcianu\r\n      }\r\n    }\r\n\r\n    y = 0;\r\n    x += boxArgs[0];\r\n  });\r\n\r\n  const numElements = cubes.length;\r\n  const surfaceWidth = numElements * boxArgs[0];\r\n  const surfaceHeight = surface.length * boxArgs[1];\r\n\r\n  let centerY = -surfaceHeight / 2;\r\n  let cameraDistance = Math.max(surfaceWidth, surfaceHeight) + numElements * boxArgs[2] + 10;\r\n\r\n  return {\r\n    centerX,\r\n    elements: (\r\n      <>\r\n        {cubes}\r\n        <mesh position={[centerX, centerY, 0]}>\r\n          <sphereBufferGeometry args={[0.2]} />\r\n          <meshStandardMaterial color=\"red\" />\r\n        </mesh>\r\n      </>\r\n    ),\r\n    width: surfaceWidth,\r\n    height: surfaceHeight,\r\n    distance: cameraDistance,\r\n  };\r\n};\r\n\r\nconst Scene = ({ surface }: Props) => {\r\n  const { centerX, elements, width, height, distance } = Surface({ surface });\r\n\r\n  return (\r\n    <div>\r\n      <Canvas\r\n        \r\n        camera={{ position: [centerX, -height / 2, distance], zoom: 1 }}\r\n        onCreated={({ camera }) => {\r\n          camera.position.x = centerX;\r\n          camera.position.y = -height / 2;\r\n          camera.position.z = distance;\r\n        }}\r\n      >\r\n        <ambientLight intensity={0.5} />\r\n        <pointLight position={[10, 10, 10]} />\r\n        {elements}\r\n      </Canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}