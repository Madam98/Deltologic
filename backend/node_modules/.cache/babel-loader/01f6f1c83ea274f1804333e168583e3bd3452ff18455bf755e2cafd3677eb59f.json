{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\",\n  _s = $RefreshSig$();\nimport * as THREE from \"three\";\nimport React, { useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\n\n// TYPY\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst boxArgs = [2, 1, 1];\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: boxArgs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineSegments\", {\n      geometry: edgesGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: \"white\",\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  const surfaceLength = surface.length;\n\n  //SKALOWANIE X [-polowa/mask do polowa/maks] na osi\n  const rowWidth = surfaceLength * boxArgs[0]; // Szerokość wiersza\n  let rowStartX = -rowWidth + boxArgs[0]; // Początkowa pozycja X wiersza\n  rowStartX = rowStartX / 2;\n\n  //SKALOWANIE Y [maksymalna wysokość] na osi\n  const maxSurfaceValue = Math.max(...surface);\n  let columnHeight = -maxSurfaceValue * boxArgs[1];\n  columnHeight = columnHeight / 2;\n  const exportRowStartX = rowStartX;\n  const exportColumnHeight = columnHeight;\n  surface.forEach((surrfaceIndex, i) => {\n    console.log(\"rowWidth\");\n    console.log(rowWidth);\n    console.log(\"boxarguments\");\n    console.log(boxArgs[0]);\n    console.log(boxArgs);\n    console.log(\"rowStartX\");\n    console.log(rowStartX);\n    console.log(\"height\");\n    console.log(surrfaceIndex);\n    console.log(\"i\");\n    console.log(i);\n    for (let j = 0; j < surrfaceIndex; j++) {\n      const posX = rowStartX;\n      const posY = columnHeight + j * boxArgs[1]; // Obliczenie pozycji Y kostki\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: posX,\n        y: posY,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }, this));\n      console.log(rowStartX);\n      console.log(posX, posY, z);\n    }\n    rowStartX += boxArgs[0];\n    console.log(\"INKREMENTACJA\");\n    console.log(rowStartX);\n  });\n  return {\n    exportRowStartX,\n    exportColumnHeight,\n    elements: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: cubes\n    }, void 0, false)\n  };\n};\n_c2 = Surface;\nconst Axes = () => {\n  _s();\n  const axesHelperRef = useRef(null);\n  useFrame(state => {\n    if (axesHelperRef.current) {\n      axesHelperRef.current.scale.set(50, 50, 50);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"axesHelper\", {\n    ref: axesHelperRef,\n    args: [5]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n};\n_s(Axes, \"1PGq3Vf+oPI+d4axwbR5Oo7LySg=\", false, function () {\n  return [useFrame];\n});\n_c3 = Axes;\nconst Scene = _ref3 => {\n  let {\n    surface\n  } = _ref3;\n  const {\n    elements,\n    exportRowStartX,\n    exportColumnHeight\n  } = Surface({\n    surface\n  });\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      background: \"pink\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), \"console.log(elements)\", /*#__PURE__*/_jsxDEV(\"group\", {\n      children: elements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Axes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_c4 = Scene;\nexport default Scene;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Axes\");\n$RefreshReg$(_c4, \"Scene\");","map":{"version":3,"names":["THREE","React","useRef","Canvas","useFrame","jsxDEV","_jsxDEV","Fragment","_Fragment","boxArgs","edgesGeometry","EdgesGeometry","BoxGeometry","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","geometry","linewidth","_c","Surface","_ref2","surface","cubes","surfaceLength","length","rowWidth","rowStartX","maxSurfaceValue","Math","max","columnHeight","exportRowStartX","exportColumnHeight","forEach","surrfaceIndex","i","console","log","j","posX","posY","push","elements","_c2","Axes","_s","axesHelperRef","state","current","scale","set","ref","_c3","Scene","_ref3","style","background","intensity","_c4","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\n\r\n\r\n// TYPY\r\ntype Props = {\r\n  surface: number[];\r\n};\r\n\r\nconst boxArgs = [2, 1, 1];\r\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\r\n\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={boxArgs} />\r\n      <meshStandardMaterial color=\"gray\" />\r\n      <lineSegments geometry={edgesGeometry}>\r\n        <lineBasicMaterial color=\"white\" linewidth={2} />\r\n      </lineSegments>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Surface = ({ surface }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  let x = 0;\r\n  let y = 0;\r\n  let z = 0;\r\n  const surfaceLength = surface.length;\r\n\r\n  //SKALOWANIE X [-polowa/mask do polowa/maks] na osi\r\n  const rowWidth = surfaceLength * boxArgs[0]; // Szerokość wiersza\r\n  let rowStartX = -rowWidth + boxArgs[0]; // Początkowa pozycja X wiersza\r\n  rowStartX = rowStartX / 2;\r\n\r\n\r\n  //SKALOWANIE Y [maksymalna wysokość] na osi\r\n  const maxSurfaceValue = Math.max(...surface);\r\n  let columnHeight = -maxSurfaceValue * boxArgs[1];\r\n  columnHeight = columnHeight / 2;\r\n\r\n  const exportRowStartX = rowStartX;\r\n  const exportColumnHeight = columnHeight;\r\n\r\n  surface.forEach((surrfaceIndex, i) => {\r\n    \r\n    console.log(\"rowWidth\")\r\n    console.log(rowWidth)\r\n    console.log(\"boxarguments\")\r\n    console.log(boxArgs[0])\r\n    console.log(boxArgs)\r\n    console.log(\"rowStartX\")\r\n    console.log(rowStartX)\r\n    console.log(\"height\")\r\n    console.log(surrfaceIndex)\r\n    console.log(\"i\")\r\n    console.log(i)\r\n    \r\n    for (let j = 0; j < surrfaceIndex; j++) {\r\n      const posX = rowStartX;\r\n      const posY = columnHeight + j * boxArgs[1]; // Obliczenie pozycji Y kostki\r\n      cubes.push(<Box key={`${i}-${j}`} x={posX} y={posY} z={z} />);\r\n      console.log(rowStartX)\r\n      console.log(posX, posY, z);\r\n    }\r\n    \r\n    rowStartX += boxArgs[0];\r\n    console.log(\"INKREMENTACJA\")\r\n    console.log(rowStartX)\r\n  });\r\n\r\n  return {\r\n    exportRowStartX,\r\n    exportColumnHeight,\r\n    elements: (\r\n      <>\r\n        {cubes}\r\n      </>\r\n    ),\r\n  };\r\n};\r\n\r\n\r\nconst Axes = () => {\r\n  const axesHelperRef = useRef<THREE.AxesHelper>(null);\r\n\r\n  useFrame((state) => {\r\n    if (axesHelperRef.current) {\r\n      axesHelperRef.current.scale.set(50, 50, 50);\r\n    }\r\n  });\r\n\r\n  return <axesHelper ref={axesHelperRef} args={[5]} />;\r\n};\r\n\r\nconst Scene = ({ surface }: Props) => {\r\n  const { elements, exportRowStartX, exportColumnHeight } = Surface({ surface });\r\n  \r\n  return (\r\n    <Canvas style={{ background: \"pink\" }}>\r\n      <ambientLight intensity={0.5} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      console.log(elements)\r\n      <group>\r\n        {elements}\r\n      </group>\r\n      <Axes />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}