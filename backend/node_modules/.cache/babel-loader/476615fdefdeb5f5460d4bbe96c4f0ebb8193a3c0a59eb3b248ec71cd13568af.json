{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\";\nimport * as THREE from \"three\";\nimport React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultBoxSize = [2, 1, 1];\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...defaultBoxSize));\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: defaultBoxSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineSegments\", {\n      geometry: edgesGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: \"white\",\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface,\n    boxSize\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  surface.forEach((height, i) => {\n    for (let j = 0; j < height; j++) {\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: x - surface.length * boxSize[0] / 2 + boxSize[0] / 2,\n        y: y - surface.reduce((acc, val) => acc + val, 0) * boxSize[1] / 2 + boxSize[1] / 2,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this));\n      y += boxSize[1];\n    }\n    y = 0;\n    z += boxSize[2];\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cubes\n  }, void 0, false);\n};\n_c2 = Surface;\nconst Scene = _ref3 => {\n  let {\n    surface,\n    boxSize = defaultBoxSize\n  } = _ref3;\n  const surfaceWidth = surface.length * boxSize[0];\n  const surfaceHeight = surface.reduce((acc, val) => acc + val, 0) * boxSize[1];\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    camera: {\n      position: [0, 0, Math.max(surfaceWidth, surfaceHeight) * 2],\n      zoom: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Surface, {\n      surface: surface,\n      boxSize: boxSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Scene;\nexport default Scene;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Scene\");","map":{"version":3,"names":["THREE","React","Canvas","jsxDEV","_jsxDEV","Fragment","_Fragment","defaultBoxSize","edgesGeometry","EdgesGeometry","BoxGeometry","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","geometry","linewidth","_c","Surface","_ref2","surface","boxSize","cubes","forEach","height","i","j","push","length","reduce","acc","val","_c2","Scene","_ref3","surfaceWidth","surfaceHeight","style","width","camera","Math","max","zoom","intensity","_c3","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\n\r\ntype Props = {\r\n  surface: number[];\r\n  boxSize?: [number, number, number];\r\n};\r\n\r\nconst defaultBoxSize = [2, 1, 1];\r\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...defaultBoxSize));\r\n\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={defaultBoxSize} />\r\n      <meshStandardMaterial color=\"gray\" />\r\n      <lineSegments geometry={edgesGeometry}>\r\n        <lineBasicMaterial color=\"white\" linewidth={2} />\r\n      </lineSegments>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Surface = ({ surface, boxSize }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  let x = 0;\r\n  let y = 0;\r\n  let z = 0;\r\n\r\n  surface.forEach((height, i) => {\r\n    for (let j = 0; j < height; j++) {\r\n      cubes.push(\r\n        <Box\r\n          key={`${i}-${j}`}\r\n          x={x - (surface.length * boxSize[0]) / 2 + boxSize[0] / 2}\r\n          y={y - (surface.reduce((acc, val) => acc + val, 0) * boxSize[1]) / 2 + boxSize[1] / 2}\r\n          z={z}\r\n        />\r\n      );\r\n      y += boxSize[1];\r\n    }\r\n\r\n    y = 0;\r\n    z += boxSize[2];\r\n  });\r\n\r\n  return <>{cubes}</>;\r\n};\r\n\r\nconst Scene = ({ surface, boxSize = defaultBoxSize }: Props) => {\r\n  const surfaceWidth = surface.length * boxSize[0];\r\n  const surfaceHeight = surface.reduce((acc, val) => acc + val, 0) * boxSize[1];\r\n\r\n  return (\r\n    <Canvas\r\n      style={{ width: \"100%\", height: \"100%\" }}\r\n      camera={{ position: [0, 0, Math.max(surfaceWidth, surfaceHeight) * 2], zoom: 1 }}\r\n    >\r\n      <ambientLight intensity={0.2} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      <Surface surface={surface} boxSize={boxSize} />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}