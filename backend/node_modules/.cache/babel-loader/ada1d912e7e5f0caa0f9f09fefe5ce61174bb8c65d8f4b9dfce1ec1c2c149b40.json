{"ast":null,"code":"export default function findWaterBlocks(heights) {\n  const waterBlocks = [];\n  const maxHeight = Math.max(...heights);\n  for (let i = 0; i < maxHeight; i++) {\n    for (let j = 1; j < heights.length - 1; j++) {\n      if (heights[j] - 1 < i) {\n        let leftFound = false;\n        let rightFound = false;\n        //BADANIE LEWEJ STRONY\n        for (let k = j - 1; k >= 0; k--) {\n          if (heights[k] - 1 >= i) {\n            leftFound = true;\n            break;\n          }\n        }\n        //BADANIE PRAWEJ STRONY\n        for (let k = j + 1; k < heights.length; k++) {\n          if (heights[k] - 1 >= i) {\n            rightFound = true;\n            break;\n          }\n        }\n        if (leftFound && rightFound) {\n          waterBlocks.push([j, i]);\n        }\n      }\n    }\n  }\n  return waterBlocks;\n}","map":{"version":3,"names":["findWaterBlocks","heights","waterBlocks","maxHeight","Math","max","i","j","length","leftFound","rightFound","k","push"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/utils/findWaterBlocks.tsx"],"sourcesContent":["export default function findWaterBlocks(heights: number[]): number[][] {\r\n    const waterBlocks: number[][] = [];\r\n    const maxHeight = Math.max(...heights);\r\n    for (let i = 0; i < maxHeight; i ++){\r\n        for (let j = 1; j < heights.length - 1; j++) {\r\n            if ( heights[j] - 1 < i){ \r\n                let leftFound = false;\r\n                let rightFound = false;\r\n                //BADANIE LEWEJ STRONY\r\n                for (let k = j - 1; k >= 0; k--) {\r\n                    if (heights[k] - 1 >= i) {\r\n                      leftFound = true;\r\n                      break;\r\n                    }\r\n                  }\r\n                //BADANIE PRAWEJ STRONY\r\n                for (let k = j + 1; k < heights.length; k++) {\r\n                    if (heights[k] - 1 >= i) {\r\n                      rightFound = true;\r\n                      break;\r\n                    }\r\n                  }\r\n                if (leftFound && rightFound) {\r\n                    waterBlocks.push([j, i]);\r\n                  }\r\n            }\r\n        }\r\n    }\r\n    return waterBlocks;\r\n}\r\n  "],"mappings":"AAAA,eAAe,SAASA,eAAeA,CAACC,OAAiB,EAAc;EACnE,MAAMC,WAAuB,GAAG,EAAE;EAClC,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGJ,OAAO,CAAC;EACtC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,EAAG,EAAC;IAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,CAACO,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;MACzC,IAAKN,OAAO,CAACM,CAAC,CAAC,GAAG,CAAC,GAAGD,CAAC,EAAC;QACpB,IAAIG,SAAS,GAAG,KAAK;QACrB,IAAIC,UAAU,GAAG,KAAK;QACtB;QACA,KAAK,IAAIC,CAAC,GAAGJ,CAAC,GAAG,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC7B,IAAIV,OAAO,CAACU,CAAC,CAAC,GAAG,CAAC,IAAIL,CAAC,EAAE;YACvBG,SAAS,GAAG,IAAI;YAChB;UACF;QACF;QACF;QACA,KAAK,IAAIE,CAAC,GAAGJ,CAAC,GAAG,CAAC,EAAEI,CAAC,GAAGV,OAAO,CAACO,MAAM,EAAEG,CAAC,EAAE,EAAE;UACzC,IAAIV,OAAO,CAACU,CAAC,CAAC,GAAG,CAAC,IAAIL,CAAC,EAAE;YACvBI,UAAU,GAAG,IAAI;YACjB;UACF;QACF;QACF,IAAID,SAAS,IAAIC,UAAU,EAAE;UACzBR,WAAW,CAACU,IAAI,CAAC,CAACL,CAAC,EAAED,CAAC,CAAC,CAAC;QAC1B;MACN;IACJ;EACJ;EACA,OAAOJ,WAAW;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}