{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cube = () => {\n  _s();\n  const meshRef = useRef(null);\n  useFrame(() => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += 0.02;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(Cube, \"/vg1AmA8+P3+Fj0/y210JTVKtL0=\", false, function () {\n  return [useFrame];\n});\n_c = Cube;\nconst Scene = () => {\n  _s2();\n  const {\n    camera\n  } = useThree();\n  const handleMouseMove = event => {\n    const {\n      clientX,\n      clientY\n    } = event;\n    const x = clientX / window.innerWidth * 2 - 1;\n    const y = -(clientY / window.innerHeight) * 2 + 1;\n    camera.position.set(x * 10, y * 10, 10);\n    camera.lookAt(0, 0, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      background: \"white\"\n    },\n    onMouseMove: handleMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cube, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s2(Scene, \"44XKsTesKVjIHDbH9uQR1TSiqHg=\", false, function () {\n  return [useThree];\n});\n_c2 = Scene;\nexport default Scene;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cube\");\n$RefreshReg$(_c2, \"Scene\");","map":{"version":3,"names":["React","useRef","Canvas","useFrame","useThree","jsxDEV","_jsxDEV","Cube","_s","meshRef","current","rotation","y","ref","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","Scene","_s2","camera","handleMouseMove","event","clientX","clientY","x","window","innerWidth","innerHeight","position","set","lookAt","style","background","onMouseMove","intensity","_c2","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef } from \"react\";\r\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\r\n\r\nconst Cube = () => {\r\n  const meshRef = useRef<THREE.Mesh>(null);\r\n\r\n  useFrame(() => {\r\n    if (meshRef.current) {\r\n      meshRef.current.rotation.y += 0.02;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <mesh ref={meshRef}>\r\n      <boxBufferGeometry args={[1, 1, 1]} />\r\n      <meshStandardMaterial color=\"red\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Scene = () => {\r\n  const { camera } = useThree();\r\n\r\n  const handleMouseMove = (event: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const { clientX, clientY } = event;\r\n    const x = (clientX / window.innerWidth) * 2 - 1;\r\n    const y = -(clientY / window.innerHeight) * 2 + 1;\r\n    camera.position.set(x * 10, y * 10, 10);\r\n    camera.lookAt(0, 0, 0);\r\n  };\r\n\r\n  return (\r\n    <Canvas\r\n      style={{ background: \"white\" }}\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      <ambientLight intensity={0.5} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      <Cube />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":";;;AACA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,OAAO,GAAGR,MAAM,CAAa,IAAI,CAAC;EAExCE,QAAQ,CAAC,MAAM;IACb,IAAIM,OAAO,CAACC,OAAO,EAAE;MACnBD,OAAO,CAACC,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAI,IAAI;IACpC;EACF,CAAC,CAAC;EAEF,oBACEN,OAAA;IAAMO,GAAG,EAAEJ,OAAQ;IAAAK,QAAA,gBACjBR,OAAA;MAAmBS,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCb,OAAA;MAAsBc,KAAK,EAAC;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEX,CAAC;AAACX,EAAA,CAfID,IAAI;EAAA,QAGRJ,QAAQ;AAAA;AAAAkB,EAAA,GAHJd,IAAI;AAiBV,MAAMe,KAAK,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClB,MAAM;IAAEC;EAAO,CAAC,GAAGpB,QAAQ,CAAC,CAAC;EAE7B,MAAMqB,eAAe,GAAIC,KAA0C,IAAK;IACtE,MAAM;MAAEC,OAAO;MAAEC;IAAQ,CAAC,GAAGF,KAAK;IAClC,MAAMG,CAAC,GAAIF,OAAO,GAAGG,MAAM,CAACC,UAAU,GAAI,CAAC,GAAG,CAAC;IAC/C,MAAMnB,CAAC,GAAG,EAAEgB,OAAO,GAAGE,MAAM,CAACE,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;IACjDR,MAAM,CAACS,QAAQ,CAACC,GAAG,CAACL,CAAC,GAAG,EAAE,EAAEjB,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;IACvCY,MAAM,CAACW,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC;EAED,oBACE7B,OAAA,CAACJ,MAAM;IACLkC,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAC/BC,WAAW,EAAEb,eAAgB;IAAAX,QAAA,gBAE7BR,OAAA;MAAciC,SAAS,EAAE;IAAI;MAAAvB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChCb,OAAA;MAAY2B,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;IAAE;MAAAjB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCb,OAAA,CAACC,IAAI;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEb,CAAC;AAACI,GAAA,CArBID,KAAK;EAAA,QACUlB,QAAQ;AAAA;AAAAoC,GAAA,GADvBlB,KAAK;AAuBX,eAAeA,KAAK;AAAC,IAAAD,EAAA,EAAAmB,GAAA;AAAAC,YAAA,CAAApB,EAAA;AAAAoB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}