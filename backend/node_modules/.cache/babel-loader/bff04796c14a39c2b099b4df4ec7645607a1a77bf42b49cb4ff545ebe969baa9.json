{"ast":null,"code":"const WaterShader = {\n  uniforms: {\n    uTime: {\n      value: 0\n    },\n    uDistortionX: {\n      value: 0.05\n    },\n    uDistortionY: {\n      value: 0.03\n    },\n    uStrength: {\n      value: 0.3\n    },\n    uSpeed: {\n      value: 0.2\n    },\n    uColor: {\n      value: new THREE.Color(0x0066ff)\n    }\n  },\n  vertexShader: `\n      varying vec2 vUv;\n      varying vec3 vPos;\n      \n      uniform float uTime;\n      uniform float uDistortionX;\n      uniform float uDistortionY;\n      uniform float uStrength;\n      uniform float uSpeed;\n  \n      void main() {\n        vUv = uv;\n        vPos = position;\n  \n        float noise = (cos(position.y * 10.0 + uTime * uSpeed) + sin(position.x * 10.0 + uTime * uSpeed)) * uStrength;\n        float distortionX = mix(uDistortionX, -uDistortionX, vUv.x);\n        float distortionY = mix(uDistortionY, -uDistortionY, vUv.y);\n        vec3 distortedPos = vec3(position.x + distortionX * noise, position.y + distortionY * noise, position.z);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(distortedPos, 1.0);\n      }\n    `,\n  fragmentShader: `\n      varying vec2 vUv;\n      varying vec3 vPos;\n      \n      uniform vec3 uColor;\n  \n      void main() {\n        gl_FragColor = vec4(uColor, 1.0);\n      }\n    `\n};\nexport default WaterShader;","map":{"version":3,"names":["WaterShader","uniforms","uTime","value","uDistortionX","uDistortionY","uStrength","uSpeed","uColor","THREE","Color","vertexShader","fragmentShader"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/utils/WaterShader.js"],"sourcesContent":["const WaterShader = {\r\n    uniforms: {\r\n      uTime: { value: 0 },\r\n      uDistortionX: { value: 0.05 },\r\n      uDistortionY: { value: 0.03 },\r\n      uStrength: { value: 0.3 },\r\n      uSpeed: { value: 0.2 },\r\n      uColor: { value: new THREE.Color(0x0066ff) }\r\n    },\r\n    vertexShader: `\r\n      varying vec2 vUv;\r\n      varying vec3 vPos;\r\n      \r\n      uniform float uTime;\r\n      uniform float uDistortionX;\r\n      uniform float uDistortionY;\r\n      uniform float uStrength;\r\n      uniform float uSpeed;\r\n  \r\n      void main() {\r\n        vUv = uv;\r\n        vPos = position;\r\n  \r\n        float noise = (cos(position.y * 10.0 + uTime * uSpeed) + sin(position.x * 10.0 + uTime * uSpeed)) * uStrength;\r\n        float distortionX = mix(uDistortionX, -uDistortionX, vUv.x);\r\n        float distortionY = mix(uDistortionY, -uDistortionY, vUv.y);\r\n        vec3 distortedPos = vec3(position.x + distortionX * noise, position.y + distortionY * noise, position.z);\r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(distortedPos, 1.0);\r\n      }\r\n    `,\r\n    fragmentShader: `\r\n      varying vec2 vUv;\r\n      varying vec3 vPos;\r\n      \r\n      uniform vec3 uColor;\r\n  \r\n      void main() {\r\n        gl_FragColor = vec4(uColor, 1.0);\r\n      }\r\n    `\r\n  };\r\n\r\n  export default WaterShader;"],"mappings":"AAAA,MAAMA,WAAW,GAAG;EAChBC,QAAQ,EAAE;IACRC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAE,CAAC;IACnBC,YAAY,EAAE;MAAED,KAAK,EAAE;IAAK,CAAC;IAC7BE,YAAY,EAAE;MAAEF,KAAK,EAAE;IAAK,CAAC;IAC7BG,SAAS,EAAE;MAAEH,KAAK,EAAE;IAAI,CAAC;IACzBI,MAAM,EAAE;MAAEJ,KAAK,EAAE;IAAI,CAAC;IACtBK,MAAM,EAAE;MAAEL,KAAK,EAAE,IAAIM,KAAK,CAACC,KAAK,CAAC,QAAQ;IAAE;EAC7C,CAAC;EACDC,YAAY,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDC,cAAc,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AAED,eAAeZ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}