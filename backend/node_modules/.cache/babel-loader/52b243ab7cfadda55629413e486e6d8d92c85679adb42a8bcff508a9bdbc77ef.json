{"ast":null,"code":"export const getWaterVolume = async surfaceArray => {\n  try {\n    const response = await fetch(\"http://localhost:5000/calculate-volume\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        surfaceArray\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.volume;\n  } catch (error) {\n    console.error(error);\n    if (error instanceof TypeError && error.message === 'Failed to fetch') {\n      console.error('Failed to fetch data. Trying again in 5 seconds...');\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      return getWaterVolume(surfaceArray);\n    } else {\n      throw new Error(\"Wystąpił błąd podczas wykonywania żądania.\");\n    }\n  }\n};","map":{"version":3,"names":["getWaterVolume","surfaceArray","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","volume","error","console","TypeError","message","Promise","resolve","setTimeout"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/api/controller.tsx"],"sourcesContent":["export const getWaterVolume = async (surfaceArray: number[]): Promise<number> => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/calculate-volume\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ surfaceArray }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data.volume;\r\n  } catch (error) {\r\n    console.error(error);\r\n    if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n      console.error('Failed to fetch data. Trying again in 5 seconds...');\r\n      await new Promise(resolve => setTimeout(resolve, 5000));\r\n      return getWaterVolume(surfaceArray);\r\n    } else {\r\n      throw new Error(\"Wystąpił błąd podczas wykonywania żądania.\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,MAAOC,YAAsB,IAAsB;EAC/E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAa,CAAC;IACvC,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,IAAIA,KAAK,YAAYE,SAAS,IAAIF,KAAK,CAACG,OAAO,KAAK,iBAAiB,EAAE;MACrEF,OAAO,CAACD,KAAK,CAAC,oDAAoD,CAAC;MACnE,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvD,OAAOnB,cAAc,CAACC,YAAY,CAAC;IACrC,CAAC,MAAM;MACL,MAAM,IAAIS,KAAK,CAAC,4CAA4C,CAAC;IAC/D;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}