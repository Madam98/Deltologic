{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getWaterVolume } from '../api/controller';\nimport findWaterBlocks from './findWaterBlocks';\nimport { useState, useRef } from 'react';\nexport async function handleClick(_ref) {\n  let {\n    inputRef,\n    setShowScene,\n    setSurfaceArray,\n    setWaterBlocksArray,\n    setShowVolume,\n    setShowVolumeValue,\n    setIsLoading,\n    setVolume,\n    setErrorMessage\n  } = _ref;\n  setShowScene(true);\n  try {\n    var _inputRef$current;\n    const inputValue = (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value;\n    if (!inputValue) {\n      console.log('Pole tekstowe jest puste');\n      return;\n    }\n    if (!/^\\d+(,\\s*\\d+)*$/.test(inputValue)) {\n      console.log('Nieprawidłowy format danych');\n      return;\n    }\n    setShowVolume(true);\n    const surfaceArray = inputValue.split(',').map(Number);\n    console.log(surfaceArray);\n    setSurfaceArray(surfaceArray);\n    const waterBlocks = findWaterBlocks(surfaceArray);\n    setWaterBlocksArray(waterBlocks);\n    const volume = await getWaterVolume(surfaceArray);\n    setVolume(volume);\n    console.log(volume);\n    setShowVolumeValue(true);\n    setIsLoading(false);\n  } catch (error) {\n    console.error(error);\n    setErrorMessage('Nieprawidłowy format danych');\n  }\n}\nexport const handleReturn = async () => {\n  _s();\n  let [surfaceArray, setSurfaceArray] = useState([]);\n  let [waterBlocks, setWaterBlocksArray] = useState([]);\n  const inputRef = useRef(null);\n  const [showScene, setShowScene] = useState(true);\n  const [key, setKey] = useState(0);\n  const [showVolume, setShowVolume] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showVolumeValue, setShowVolumeValue] = useState(false);\n  const [volume, setVolume] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  setShowVolume(false);\n  surfaceArray = [];\n  setSurfaceArray(surfaceArray);\n  setShowScene(true);\n  /*volume = null;*/\n  setVolume(volume);\n  setIsLoading(true);\n};\n_s(handleReturn, \"t4/lY4ZXDJoI5nyZOTz8M+7JHz0=\");","map":{"version":3,"names":["getWaterVolume","findWaterBlocks","useState","useRef","handleClick","_ref","inputRef","setShowScene","setSurfaceArray","setWaterBlocksArray","setShowVolume","setShowVolumeValue","setIsLoading","setVolume","setErrorMessage","_inputRef$current","inputValue","current","value","console","log","test","surfaceArray","split","map","Number","waterBlocks","volume","error","handleReturn","_s","showScene","key","setKey","showVolume","isLoading","showVolumeValue","errorMessage"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/utils/handleClick.tsx"],"sourcesContent":["import { getWaterVolume } from '../api/controller';\r\nimport findWaterBlocks from './findWaterBlocks';\r\nimport { useState, useRef } from 'react';\r\n\r\nexport async function handleClick({\r\n    inputRef,\r\n    setShowScene,\r\n    setSurfaceArray,\r\n    setWaterBlocksArray,\r\n    setShowVolume,\r\n    setShowVolumeValue,\r\n    setIsLoading,\r\n    setVolume,\r\n    setErrorMessage,\r\n  }: HandleClickArguments) {\r\n    setShowScene(true);\r\n    try {\r\n      const inputValue = inputRef.current?.value;\r\n      if (!inputValue) {\r\n        console.log('Pole tekstowe jest puste');\r\n        return;\r\n      }\r\n      if (!/^\\d+(,\\s*\\d+)*$/.test(inputValue)) {\r\n        console.log('Nieprawidłowy format danych');\r\n        return;\r\n      }\r\n      setShowVolume(true);\r\n      const surfaceArray = inputValue.split(',').map(Number);\r\n      console.log(surfaceArray);\r\n      setSurfaceArray(surfaceArray);\r\n      const waterBlocks = findWaterBlocks(surfaceArray);\r\n      setWaterBlocksArray(waterBlocks);\r\n      const volume = await getWaterVolume(surfaceArray);\r\n      setVolume(volume);\r\n      console.log(volume);\r\n      setShowVolumeValue(true);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setErrorMessage('Nieprawidłowy format danych');\r\n    }\r\n  }\r\n\r\n  \r\nexport const handleReturn = async () => {\r\n    let [surfaceArray, setSurfaceArray] = useState<number[]>([]);\r\n    let [waterBlocks, setWaterBlocksArray] = useState<number[][]>([])\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const [showScene, setShowScene] = useState(true);\r\n    const [key, setKey] = useState(0);\r\n\r\n    const [showVolume, setShowVolume] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [showVolumeValue, setShowVolumeValue] = useState(false);\r\n    const [volume, setVolume] = useState<number | null>(null);\r\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n    setShowVolume(false);\r\n    surfaceArray = [];\r\n    setSurfaceArray(surfaceArray);\r\n    setShowScene(true);\r\n    /*volume = null;*/\r\n    setVolume(volume);\r\n    setIsLoading(true);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}