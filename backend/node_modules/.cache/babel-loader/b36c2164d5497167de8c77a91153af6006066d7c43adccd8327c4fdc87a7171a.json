{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport whitecloud from './assets/whitecloud.png';\nimport { getWaterVolume } from './api/controller';\nimport findWaterBlocks from './utils/findWaterBlocks';\nimport './App.css';\nimport Scene from \"./components/scene\";\nimport { GridLoader } from 'react-spinners';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const inputRef = useRef(null);\n  const [surfaceArray, setSurfaceArray] = useState([]);\n  const [waterBlocks, setWaterBlocksArray] = useState([]);\n  const [showScene, setShowScene] = useState(true);\n  const [showVolume, setShowVolume] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showVolumeValue, setShowVolumeValue] = useState(false);\n  const [volume, setVolume] = useState(null);\n  const handleClick = async () => {\n    try {\n      var _inputRef$current;\n      const inputValue = (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value;\n      if (!inputValue) {\n        throw new EmptyInputError('Field input is empty');\n      }\n      if (!/^\\d+(,\\s*\\d+)*$/.test(inputValue)) {\n        throw new InvalidDataFormatError('Inavlid data format');\n      }\n      setShowVolume(true);\n      setShowScene(true);\n      const surfaceArray = inputValue.split(',').map(Number);\n      setSurfaceArray(surfaceArray);\n      const waterBlocks = findWaterBlocks(surfaceArray);\n      setWaterBlocksArray(waterBlocks);\n      const volume = await getWaterVolume(surfaceArray);\n      setVolume(volume);\n      setShowVolumeValue(true);\n      setIsLoading(false);\n      console.log(showVolumeValue);\n      console.log(surfaceArray);\n      console.log(volume);\n    } catch (error) {\n      if (error instanceof EmptyInputError) {\n        // obsługa błędu, gdy pole tekstowe jest puste\n      } else if (error instanceof InvalidDataFormatError) {\n        // obsługa błędu, gdy format danych jest nieprawidłowy\n      }\n    }\n    ;\n    const handleReturn = async () => {\n      setShowVolume(false);\n      //surfaceArray = [];\n      setSurfaceArray(surfaceArray);\n      setShowScene(true);\n      const volume = null;\n      setVolume(volume);\n      setIsLoading(true);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cloudContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        style: {\n          paddingTop: '18vh'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"whiteCloud\",\n          src: whitecloud,\n          alt: \"whiteCloud\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), showScene && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sceneContainer\",\n        children: /*#__PURE__*/_jsxDEV(Scene, {\n          surface: surfaceArray,\n          waterBlocks: waterBlocks\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputBox\",\n        children: [!showVolume && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \" Enter array to check rain volume \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \" Data format example: 3, 2, 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputText\",\n            type: \"text\",\n            ref: inputRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: handleClick,\n              children: \"Check volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), showVolume && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"VOLUME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this), isLoading ? /*#__PURE__*/_jsxDEV(GridLoader, {\n            size: 15,\n            color: \"#249eac\",\n            loading: isLoading,\n            style: {\n              paddingBottom: '1vh'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: volume\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button2\",\n              onClick: handleReturn,\n              children: \"Enter new value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this);\n  };\n}\n_s(App, \"57fH+auEtyCHCaytXwSb6lx8gBE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","whitecloud","getWaterVolume","findWaterBlocks","Scene","GridLoader","jsxDEV","_jsxDEV","App","_s","inputRef","surfaceArray","setSurfaceArray","waterBlocks","setWaterBlocksArray","showScene","setShowScene","showVolume","setShowVolume","isLoading","setIsLoading","showVolumeValue","setShowVolumeValue","volume","setVolume","handleClick","_inputRef$current","inputValue","current","value","EmptyInputError","test","InvalidDataFormatError","split","map","Number","console","log","error","handleReturn","className","children","style","paddingTop","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","surface","type","ref","onClick","size","color","loading","paddingBottom","_c","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/App.tsx"],"sourcesContent":["import { useState, useRef } from 'react';\nimport whitecloud from './assets/whitecloud.png';\nimport { getWaterVolume } from './api/controller';\nimport findWaterBlocks from './utils/findWaterBlocks';\nimport './App.css';\nimport Scene from \"./components/scene\";\nimport { GridLoader } from 'react-spinners';\n\nfunction App() {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [surfaceArray, setSurfaceArray] = useState<number[]>([]);\n  const [waterBlocks, setWaterBlocksArray] = useState<number[][]>([]);\n  const [showScene, setShowScene] = useState(true);\n  const [showVolume, setShowVolume] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showVolumeValue, setShowVolumeValue] = useState(false);\n  const [volume, setVolume] = useState<number | null>(null);\n\n  const handleClick = async () => {\n    try {\n      const inputValue = inputRef.current?.value;\n      if (!inputValue) {\n        throw new EmptyInputError('Field input is empty');\n      }\n      if (!/^\\d+(,\\s*\\d+)*$/.test(inputValue)) {\n        throw new InvalidDataFormatError('Inavlid data format');\n      }\n      setShowVolume(true);\n      setShowScene(true); \n      const surfaceArray = inputValue.split(',').map(Number);\n      setSurfaceArray(surfaceArray);\n      const waterBlocks = findWaterBlocks(surfaceArray);\n      setWaterBlocksArray(waterBlocks);\n      const volume = await getWaterVolume(surfaceArray);\n      setVolume(volume);\n      setShowVolumeValue(true);\n      setIsLoading(false);\n\n      console.log(showVolumeValue);\n      console.log(surfaceArray);\n      console.log(volume)\n\n    } catch (error) {\n      if (error instanceof EmptyInputError) {\n        // obsługa błędu, gdy pole tekstowe jest puste\n      } else if (error instanceof InvalidDataFormatError) {\n        // obsługa błędu, gdy format danych jest nieprawidłowy\n    }\n  };\n  \n  const handleReturn = async () => {\n      setShowVolume(false);\n      //surfaceArray = [];\n      setSurfaceArray(surfaceArray);\n      setShowScene(true);\n      const volume = null;\n      setVolume(volume);\n      setIsLoading(true);\n  }\n\n\n  return (\n    <div className=\"cloudContainer\">\n      <div className=\"center\" style={{paddingTop:'18vh'}}>\n        <img className=\"whiteCloud\" src={whitecloud} alt=\"whiteCloud\" />\n      </div>\n        {showScene && (\n          <div className=\"sceneContainer\">\n            <Scene surface={surfaceArray} waterBlocks={waterBlocks} />\n          </div>\n        )}\n      <div className=\"inputBox\">\n      {!showVolume && (\n        <div>\n          <h4> Enter array to check rain volume </h4>\n          <h6> Data format example: 3, 2, 3</h6>\n          <input className=\"inputText\" type=\"text\" ref={inputRef} />\n          <div>\n            <button className=\"button\" onClick={handleClick}>Check volume</button>\n          </div>  \n        </div>\n      )}\n      {showVolume && (\n        <div>\n          <h1>VOLUME</h1>  \n          {isLoading ? (\n          <GridLoader size={15} color={\"#249eac\"} loading={isLoading} style={{paddingBottom:'1vh'}}/>\n          ): \n          <div>\n            <h1>{volume}</h1>\n          </div>\n          }\n          <div>\n            <button className=\"button2\" onClick={handleReturn}>Enter new value</button>\n          </div> \n        </div>\n      )}\n      </div>\n    </div>\n  );\n}\n\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}