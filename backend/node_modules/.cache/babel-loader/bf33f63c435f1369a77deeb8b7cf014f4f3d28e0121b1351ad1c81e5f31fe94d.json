{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Box = _ref => {\n  _s();\n  var _meshRef$current;\n  let {\n    x,\n    y,\n    z,\n    color\n  } = _ref;\n  const meshRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"edgesGeometry\", {\n      args: [(_meshRef$current = meshRef.current) === null || _meshRef$current === void 0 ? void 0 : _meshRef$current.geometry, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n      color: \"white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this);\n};\n_s(Box, \"e4CAwo/q3Mh5N9nuIOzG1d1uu5c=\");\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let z = 0;\n  surface.forEach((y, i) => {\n    for (let j = 0; j < y; j++) {\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: x,\n        y: y / 2,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 18\n      }, this));\n      z += 1;\n    }\n    x += 1;\n    z = 0;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cubes\n  }, void 0, false);\n};\n_c2 = Surface;\nconst Scene = _ref3 => {\n  let {\n    surface\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    camera: {\n      position: [0, -10, 0],\n      scale: [100, 100, 100]\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Surface, {\n      surface: surface\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Scene;\nexport default Scene;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Scene\");","map":{"version":3,"names":["React","useRef","Canvas","jsxDEV","_jsxDEV","Fragment","_Fragment","Box","_ref","_s","_meshRef$current","x","y","z","color","meshRef","ref","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","current","geometry","_c","Surface","_ref2","surface","cubes","forEach","i","j","push","_c2","Scene","_ref3","style","width","height","camera","scale","intensity","_c3","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\n\r\ntype Props = {\r\n  surface: number[];\r\n};\r\n\r\nconst Box = ({ x, y, z, color }: { x: number; y: number; z: number; color: string }) => {\r\n    const meshRef = useRef<THREE.Mesh>(null);\r\n  \r\n    return (\r\n      <mesh ref={meshRef} position={[x, y, z]}>\r\n        <boxBufferGeometry args={[1, 1, 1]} />\r\n        <meshStandardMaterial color={color} />\r\n        <edgesGeometry args={[meshRef.current?.geometry as THREE.BufferGeometry, 1]} />\r\n        <lineBasicMaterial color=\"white\" />\r\n      </mesh>\r\n    );\r\n  };\r\n\r\nconst Surface = ({ surface }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  let x = 0;\r\n  let z = 0;\r\n\r\n  surface.forEach((y, i) => {\r\n    for (let j = 0; j < y; j++) {\r\n      cubes.push(<Box key={`${i}-${j}`} x={x} y={y / 2} z={z} />);\r\n      z += 1;\r\n    }\r\n\r\n    x += 1;\r\n    z = 0;\r\n  });\r\n\r\n  return <>{cubes}</>;\r\n};\r\n\r\nconst Scene = ({ surface }: Props) => {\r\n  return (\r\n    <Canvas style={{ width: \"100%\", height: \"100%\" }} camera={{ position: [0, -10, 0], scale: [100, 100, 100] }}>\r\n      <ambientLight intensity={0.2} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      <Surface surface={surface} />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}