{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from 'react';\nimport whitecloud from './assets/whitecloud.png';\nimport { getWaterVolume } from './api/controller';\nimport findWaterBlocks from './utils/findWaterBlocks';\nimport './App.css';\nimport Scene from \"./components/scene\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const inputRef = useRef(null);\n  const [surfaceArray, setSurfaceArray] = useState([]);\n  const [waterBlocks, setWaterBlocksArray] = useState([]);\n  const [key, setKey] = useState(0);\n  const [showScene, setShowScene] = useState(true);\n  const handleClick = async () => {\n    setKey(key + 1); // zmiana klucza, aby wymusić ponowne wyrenderowanie\n    setShowScene(true); // ustawienie flagi, aby wyświetlić \"Scene\"\n    try {\n      var _inputRef$current;\n      const inputValue = (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value;\n      if (!inputValue) {\n        console.log('Pole tekstowe jest puste');\n        return;\n      }\n      const surfaceArray = inputValue.split(',').map(Number);\n      console.log(surfaceArray);\n      setSurfaceArray(surfaceArray);\n      const waterBlocks = findWaterBlocks(surfaceArray);\n      const volume = await getWaterVolume(surfaceArray);\n      console.log(volume);\n      setKey(key + 1); // zmiana klucza, aby wymusić ponowne wyrenderowanie\n      setShowScene(true); // ustawienie flagi, aby wyświetlić \"Scene\"\n      setWaterBlocksArray(waterBlocks);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cloudContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      style: {\n        paddingTop: '18vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"whiteCloud\",\n        src: whitecloud,\n        alt: \"whiteCloud\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), showScene && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sceneContainer\",\n      children: /*#__PURE__*/_jsxDEV(Scene, {\n        surface: surfaceArray,\n        waterBlocks: waterBlocks\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputBox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"inputText\",\n        type: \"text\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        style: {\n          backgroundColor: 'white',\n          color: '#2196F3',\n          padding: '10px',\n          borderRadius: '5px',\n          border: 'none',\n          boxShadow: '0 2px 4px rgba(0,0,0,.2)',\n          cursor: 'pointer'\n        },\n        children: \"Sprawd\\u017A opady\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TSaLFADOHqhIgmI0FkSu7vwD/bc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","whitecloud","getWaterVolume","findWaterBlocks","Scene","jsxDEV","_jsxDEV","App","_s","inputRef","surfaceArray","setSurfaceArray","waterBlocks","setWaterBlocksArray","key","setKey","showScene","setShowScene","handleClick","_inputRef$current","inputValue","current","value","console","log","split","map","Number","volume","error","className","children","style","paddingTop","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","surface","marginBottom","type","ref","onClick","backgroundColor","color","padding","borderRadius","border","boxShadow","cursor","_c","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/App.tsx"],"sourcesContent":["import { useState, useRef } from 'react';\nimport whitecloud from './assets/whitecloud.png';\nimport { getWaterVolume } from './api/controller';\nimport findWaterBlocks from './utils/findWaterBlocks';\nimport './App.css';\nimport Scene from \"./components/scene\";\n\nfunction App() {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [surfaceArray, setSurfaceArray] = useState<number[]>([]);\n  const [waterBlocks, setWaterBlocksArray] = useState<number[][]>([]);\n  const [key, setKey] = useState(0);\n  const [showScene, setShowScene] = useState(true);\n\n  const handleClick = async () => {\n    setKey(key + 1); // zmiana klucza, aby wymusić ponowne wyrenderowanie\n    setShowScene(true); // ustawienie flagi, aby wyświetlić \"Scene\"\n    try {\n      const inputValue = inputRef.current?.value;\n      if (!inputValue) {\n        console.log('Pole tekstowe jest puste');\n        return;\n      }\n      const surfaceArray = inputValue.split(',').map(Number);\n      console.log(surfaceArray);\n      setSurfaceArray(surfaceArray);\n      const waterBlocks = findWaterBlocks(surfaceArray);\n      const volume = await getWaterVolume(surfaceArray);\n      console.log(volume)\n      setKey(key + 1); // zmiana klucza, aby wymusić ponowne wyrenderowanie\n      setShowScene(true); // ustawienie flagi, aby wyświetlić \"Scene\"\n      setWaterBlocksArray(waterBlocks);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className=\"cloudContainer\">\n      <div className=\"center\" style={{paddingTop:'18vh'}}>\n        <img className=\"whiteCloud\" src={whitecloud} alt=\"whiteCloud\" />\n      </div>\n      {showScene && (\n      <div className=\"sceneContainer\">\n        <Scene key={key} surface={surfaceArray} waterBlocks={waterBlocks} />\n      </div>\n      )}\n      <div className=\"inputBox\"/>\n        <div style={{ marginBottom: '10px' }}>    \n          <input className=\"inputText\" type=\"text\" ref={inputRef} />\n        </div>\n        <div>\n          <button onClick={handleClick} style={{ backgroundColor: 'white', color: '#2196F3', padding: '10px', borderRadius: '5px', border: 'none', boxShadow: '0 2px 4px rgba(0,0,0,.2)', cursor: 'pointer' }}>Sprawdź opady</button>\n        </div>\n      </div>\n\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}