{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as THREE from \"three\";\nimport React, { useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport WaterShader from \"../utils/WaterShader\";\n\n// TYPY\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst boxArgs = [2, 1, 1];\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: boxArgs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineSegments\", {\n      geometry: edgesGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: \"white\",\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface,\n    waterBlocks\n  } = _ref2;\n  const cubes = [];\n  const water = [];\n  let x = 0;\n  let y = 0;\n  const surfaceLength = surface.length;\n\n  //SKALOWANIE X [-polowa/mask do polowa/maks] na osi\n  const rowWidth = surfaceLength * boxArgs[0]; // Szerokość wiersza\n  let rowStartX = -rowWidth + boxArgs[0]; // Początkowa pozycja X wiersza\n  rowStartX = rowStartX / 2;\n\n  //SKALOWANIE Y [maksymalna wysokość] na osi\n  const maxSurfaceValue = Math.max(...surface);\n  let columnHeight = -(maxSurfaceValue - 1) * boxArgs[1];\n  columnHeight = columnHeight / 2;\n  const exportRowStartX = rowStartX;\n  const exportColumnHeight = columnHeight;\n  const distance = -(Math.sqrt(rowStartX ** 2 + columnHeight ** 2) + 5);\n  let z = distance;\n\n  // Tworzenie klocków powierzchni\n  surface.forEach((surfaceIndex, i) => {\n    for (let j = 0; j < surfaceIndex; j++) {\n      const posX = rowStartX;\n      const posY = columnHeight + j * boxArgs[1]; // Obliczenie pozycji Y kostki\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: posX,\n        y: posY,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 18\n      }, this));\n    }\n    rowStartX += boxArgs[0];\n  });\n  return {\n    exportRowStartX,\n    exportColumnHeight,\n    elements: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [cubes, water]\n    }, void 0, true)\n  };\n};\n_c2 = Surface;\nconst Axes = () => {\n  _s();\n  const axesHelperRef = useRef(null);\n  useFrame(state => {\n    if (axesHelperRef.current) {\n      axesHelperRef.current.scale.set(50, 50, 50);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"axesHelper\", {\n    ref: axesHelperRef,\n    args: [5]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n_s(Axes, \"1PGq3Vf+oPI+d4axwbR5Oo7LySg=\", false, function () {\n  return [useFrame];\n});\n_c3 = Axes;\nconst Scene = _ref3 => {\n  _s2();\n  let {\n    surface,\n    waterBlocks\n  } = _ref3;\n  const {\n    elements,\n    exportRowStartX,\n    exportColumnHeight\n  } = Surface({\n    surface,\n    waterBlocks\n  });\n\n  // Obliczanie pozycji wody\n  const waterPositions = waterBlocks;\n  const distance = -(Math.sqrt(exportRowStartX ** 2 + exportColumnHeight ** 2) + 5);\n\n  // Utwórz ref do materiału WaterShader\n  const waterMaterialRef = useRef(new THREE.ShaderMaterial(WaterShader));\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"group\", {\n      scale: [1, 1, 1],\n      children: [elements, waterPositions.map((_ref4, i) => {\n        let [x, y] = _ref4;\n        return /*#__PURE__*/_jsxDEV(\"mesh\", {\n          position: [2 * (x + exportRowStartX / 2), y + exportColumnHeight, distance],\n          children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n            args: boxArgs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"primitive\", {\n            object: waterMaterialRef.current\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, `water-${i}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s2(Scene, \"SU7oBHGg/RB+v14wzO4uxUs+Et0=\");\n_c4 = Scene;\nexport default Scene;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Axes\");\n$RefreshReg$(_c4, \"Scene\");","map":{"version":3,"names":["THREE","React","useRef","Canvas","useFrame","WaterShader","jsxDEV","_jsxDEV","Fragment","_Fragment","boxArgs","edgesGeometry","EdgesGeometry","BoxGeometry","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","geometry","linewidth","_c","Surface","_ref2","surface","waterBlocks","cubes","water","surfaceLength","length","rowWidth","rowStartX","maxSurfaceValue","Math","max","columnHeight","exportRowStartX","exportColumnHeight","distance","sqrt","forEach","surfaceIndex","i","j","posX","posY","push","elements","_c2","Axes","_s","axesHelperRef","state","current","scale","set","ref","_c3","Scene","_ref3","_s2","waterPositions","waterMaterialRef","ShaderMaterial","intensity","map","_ref4","object","_c4","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\nimport WaterShader from \"../utils/WaterShader\"\r\n\r\n// TYPY\r\ntype Props = {\r\n  surface: number[];\r\n  waterBlocks: number[][];\r\n};\r\n\r\n\r\n\r\nconst boxArgs = [2, 1, 1];\r\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={boxArgs} />\r\n      <meshStandardMaterial color=\"gray\" />\r\n      <lineSegments geometry={edgesGeometry}>\r\n        <lineBasicMaterial color=\"white\" linewidth={2} />\r\n      </lineSegments>\r\n    </mesh>\r\n  );\r\n};\r\nconst Surface = ({ surface, waterBlocks }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  const water: JSX.Element[] = [];\r\n\r\n  let x = 0;\r\n  let y = 0;\r\n  const surfaceLength = surface.length;\r\n\r\n  //SKALOWANIE X [-polowa/mask do polowa/maks] na osi\r\n  const rowWidth = surfaceLength * boxArgs[0]; // Szerokość wiersza\r\n  let rowStartX = -rowWidth + boxArgs[0]; // Początkowa pozycja X wiersza\r\n  rowStartX = rowStartX / 2;\r\n\r\n  //SKALOWANIE Y [maksymalna wysokość] na osi\r\n  const maxSurfaceValue = Math.max(...surface);\r\n  let columnHeight = -(maxSurfaceValue - 1) * boxArgs[1];\r\n  columnHeight = columnHeight / 2;\r\n\r\n  const exportRowStartX = rowStartX;\r\n  const exportColumnHeight = columnHeight;\r\n\r\n  const distance = -(Math.sqrt(rowStartX ** 2 + columnHeight ** 2) + 5);\r\n  let z = distance;\r\n\r\n  // Tworzenie klocków powierzchni\r\n  surface.forEach((surfaceIndex, i) => {\r\n    for (let j = 0; j < surfaceIndex; j++) {\r\n      const posX = rowStartX;\r\n      const posY = columnHeight + j * boxArgs[1]; // Obliczenie pozycji Y kostki\r\n      cubes.push(<Box key={`${i}-${j}`} x={posX} y={posY} z={z} />);\r\n    }\r\n    rowStartX += boxArgs[0];\r\n  });\r\n\r\n  return {\r\n    exportRowStartX,\r\n    exportColumnHeight,\r\n    elements: (\r\n      <>\r\n        {cubes}\r\n        {water}\r\n      </>\r\n    ),\r\n  };\r\n};\r\n\r\nconst Axes = () => {\r\n  const axesHelperRef = useRef<THREE.AxesHelper>(null);\r\n  useFrame((state) => {\r\n    if (axesHelperRef.current) {\r\n      axesHelperRef.current.scale.set(50, 50, 50);\r\n    }\r\n  });\r\n  return <axesHelper ref={axesHelperRef} args={[5]} />;\r\n};\r\n\r\n\r\nconst Scene = ({ surface, waterBlocks }: Props) => {\r\n  const { elements, exportRowStartX, exportColumnHeight } = Surface({ surface, waterBlocks });\r\n\r\n  // Obliczanie pozycji wody\r\n  const waterPositions = waterBlocks;\r\n  const distance = -(Math.sqrt(exportRowStartX ** 2 + exportColumnHeight ** 2) + 5);\r\n\r\n  // Utwórz ref do materiału WaterShader\r\n  const waterMaterialRef = useRef(new THREE.ShaderMaterial(WaterShader));\r\n\r\n  return (\r\n    <Canvas>\r\n      <ambientLight intensity={0.5} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      <group scale={[1, 1, 1]}>\r\n        {elements}\r\n        \r\n        {waterPositions.map(([x, y], i) => (\r\n          <mesh position={[2*(x + exportRowStartX/2), y + exportColumnHeight, distance]} key={`water-${i}`}>\r\n            <boxBufferGeometry args={boxArgs} />\r\n            {/* Przekaż ref do materiału WaterShader */}\r\n            <primitive object={waterMaterialRef.current} />\r\n          </mesh>\r\n        ))}\r\n      </group>\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}