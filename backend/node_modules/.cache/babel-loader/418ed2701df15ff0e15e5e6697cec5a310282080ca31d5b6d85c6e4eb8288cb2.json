{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\";\nimport * as THREE from \"three\";\nimport React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst boxArgs = [2, 1, 1];\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: boxArgs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineSegments\", {\n      geometry: edgesGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: \"white\",\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  surface.forEach((height, i) => {\n    for (let j = 0; j < height; j++) {\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: x,\n        y: y,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 18\n      }, this));\n      y += 1;\n    }\n    y = 0;\n    z += 1;\n  });\n\n  // Obliczanie środka geometrii\n  const geometrySize = new THREE.Vector3(boxArgs[0] * surface.length, boxArgs[1] * Math.max(...surface), boxArgs[2] * surface.reduce((sum, val) => sum + val, 0));\n  const center = new THREE.Vector3().addVectors(new THREE.Vector3(geometrySize.x / 2, geometrySize.y / 2, geometrySize.z / 2), new THREE.Vector3(-boxArgs[0] / 2, -boxArgs[1] / 2, -boxArgs[2] / 2));\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    position: center,\n    children: cubes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n_c2 = Surface;\nconst Scene = _ref3 => {\n  let {\n    surface\n  } = _ref3;\n  // Obliczanie pozycji kamery\n  const geometrySize = new THREE.Vector3(boxArgs[0] * surface.length, boxArgs[1] * Math.max(...surface), boxArgs[2] * surface.reduce((sum, val) => sum + val, 0));\n  const maxDimension = Math.max(geometrySize.x, geometrySize.y, geometrySize.z);\n  const cameraPosition = new THREE.Vector3().addVectors(center, new THREE.Vector3(0, 0, maxDimension * 2));\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    camera: {\n      position: cameraPosition,\n      zoom: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Surface, {\n      surface: surface\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_c3 = Scene;\nexport default Scene;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Scene\");","map":{"version":3,"names":["THREE","React","Canvas","jsxDEV","_jsxDEV","boxArgs","edgesGeometry","EdgesGeometry","BoxGeometry","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","geometry","linewidth","_c","Surface","_ref2","surface","cubes","forEach","height","i","j","push","geometrySize","Vector3","length","Math","max","reduce","sum","val","center","addVectors","_c2","Scene","_ref3","maxDimension","cameraPosition","style","width","camera","zoom","intensity","_c3","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\n\r\ntype Props = {\r\n  surface: number[];\r\n};\r\n\r\nconst boxArgs = [2, 1, 1];\r\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\r\n\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={boxArgs} />\r\n      <meshStandardMaterial color=\"gray\" />\r\n      <lineSegments geometry={edgesGeometry}>\r\n        <lineBasicMaterial color=\"white\" linewidth={2} />\r\n      </lineSegments>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Surface = ({ surface }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  let x = 0;\r\n  let y = 0;\r\n  let z = 0;\r\n\r\n  surface.forEach((height, i) => {\r\n    for (let j = 0; j < height; j++) {\r\n      cubes.push(<Box key={`${i}-${j}`} x={x} y={y} z={z} />);\r\n      y += 1;\r\n    }\r\n\r\n    y = 0;\r\n    z += 1;\r\n  });\r\n\r\n  // Obliczanie środka geometrii\r\n  const geometrySize = new THREE.Vector3(\r\n    boxArgs[0] * surface.length,\r\n    boxArgs[1] * Math.max(...surface),\r\n    boxArgs[2] * surface.reduce((sum, val) => sum + val, 0)\r\n  );\r\n  const center = new THREE.Vector3().addVectors(\r\n    new THREE.Vector3(geometrySize.x / 2, geometrySize.y / 2, geometrySize.z / 2),\r\n    new THREE.Vector3(-boxArgs[0] / 2, -boxArgs[1] / 2, -boxArgs[2] / 2)\r\n  );\r\n\r\n  return <group position={center}>{cubes}</group>;\r\n};\r\n\r\nconst Scene = ({ surface }: Props) => {\r\n  // Obliczanie pozycji kamery\r\n  const geometrySize = new THREE.Vector3(\r\n    boxArgs[0] * surface.length,\r\n    boxArgs[1] * Math.max(...surface),\r\n    boxArgs[2] * surface.reduce((sum, val) => sum + val, 0)\r\n  );\r\n  const maxDimension = Math.max(geometrySize.x, geometrySize.y, geometrySize.z);\r\n  const cameraPosition = new THREE.Vector3().addVectors(center, new THREE.Vector3(0, 0, maxDimension * 2));\r\n\r\n  return (\r\n    <Canvas style={{ width: \"100%\", height: \"100%\" }} camera={{ position: cameraPosition, zoom: 3 }}>\r\n      <ambientLight intensity={0.2} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      <Surface surface={surface} />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}