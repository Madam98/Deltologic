{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adamm\\\\Documents\\\\GitHub\\\\Delto\\\\client\\\\src\\\\components\\\\scene.tsx\",\n  _s = $RefreshSig$();\nimport * as THREE from \"three\";\nimport React, { useRef } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\n\n// TYPY\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst boxArgs = [2, 1, 1];\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\nconst Box = _ref => {\n  let {\n    x,\n    y,\n    z\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    position: [x, y, z],\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: boxArgs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"gray\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineSegments\", {\n      geometry: edgesGeometry,\n      children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n        color: \"white\",\n        linewidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = Box;\nconst Surface = _ref2 => {\n  let {\n    surface\n  } = _ref2;\n  const cubes = [];\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  surface.forEach((height, i) => {\n    const rowWidth = height * boxArgs[0]; // Szerokość wiersza\n    const rowStartX = -rowWidth / 2 + boxArgs[0] / 2; // Początkowa pozycja X wiersza\n\n    console.log(\"rowWidth\");\n    console.log(rowWidth);\n    console.log(\"boxarguments\");\n    console.log(boxArgs[0]);\n    console.log(boxArgs);\n    console.log(\"rowStartX\");\n    console.log(rowStartX);\n    console.log(\"height\");\n    console.log(height);\n    console.log(\"i\");\n    console.log(i);\n    for (let j = 0; j < height; j++) {\n      const posY = y + j * boxArgs[1]; // Obliczenie pozycji Y kostki\n      cubes.push( /*#__PURE__*/_jsxDEV(Box, {\n        x: x,\n        y: posY,\n        z: z\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 18\n      }, this));\n      console.log(x, posY, z);\n    }\n    x += height * boxArgs[1]; // Inkrementacja y po dodaniu całego rzędu kostek\n  });\n\n  return {\n    elements: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: cubes\n    }, void 0, false)\n  };\n};\n_c2 = Surface;\nconst Axes = () => {\n  _s();\n  const axesHelperRef = useRef(null);\n  useFrame(state => {\n    if (axesHelperRef.current) {\n      axesHelperRef.current.scale.set(50, 50, 50);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"axesHelper\", {\n    ref: axesHelperRef,\n    args: [5]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n_s(Axes, \"1PGq3Vf+oPI+d4axwbR5Oo7LySg=\", false, function () {\n  return [useFrame];\n});\n_c3 = Axes;\nconst Scene = _ref3 => {\n  let {\n    surface\n  } = _ref3;\n  const {\n    elements\n  } = Surface({\n    surface\n  });\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    style: {\n      background: \"pink\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 10, 10]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), \"console.log(elements)\", /*#__PURE__*/_jsxDEV(\"group\", {\n      children: elements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Axes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_c4 = Scene;\nexport default Scene;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Box\");\n$RefreshReg$(_c2, \"Surface\");\n$RefreshReg$(_c3, \"Axes\");\n$RefreshReg$(_c4, \"Scene\");","map":{"version":3,"names":["THREE","React","useRef","Canvas","useFrame","jsxDEV","_jsxDEV","Fragment","_Fragment","boxArgs","edgesGeometry","EdgesGeometry","BoxGeometry","Box","_ref","x","y","z","position","children","args","fileName","_jsxFileName","lineNumber","columnNumber","color","geometry","linewidth","_c","Surface","_ref2","surface","cubes","forEach","height","i","rowWidth","rowStartX","console","log","j","posY","push","elements","_c2","Axes","_s","axesHelperRef","state","current","scale","set","ref","_c3","Scene","_ref3","style","background","intensity","_c4","$RefreshReg$"],"sources":["C:/Users/adamm/Documents/GitHub/Delto/client/src/components/scene.tsx"],"sourcesContent":["import * as THREE from \"three\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Canvas, useFrame } from \"@react-three/fiber\";\r\n\r\n\r\n// TYPY\r\ntype Props = {\r\n  surface: number[];\r\n};\r\n\r\nconst boxArgs = [2, 1, 1];\r\nconst edgesGeometry = new THREE.EdgesGeometry(new THREE.BoxGeometry(...boxArgs));\r\n\r\nconst Box = ({ x, y, z }: { x: number; y: number; z: number }) => {\r\n  return (\r\n    <mesh position={[x, y, z]}>\r\n      <boxBufferGeometry args={boxArgs} />\r\n      <meshStandardMaterial color=\"gray\" />\r\n      <lineSegments geometry={edgesGeometry}>\r\n        <lineBasicMaterial color=\"white\" linewidth={2} />\r\n      </lineSegments>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nconst Surface = ({ surface }: Props) => {\r\n  const cubes: JSX.Element[] = [];\r\n  let x = 0;\r\n  let y = 0;\r\n  let z = 0;\r\n\r\n  surface.forEach((height, i) => {\r\n    const rowWidth = height * boxArgs[0]; // Szerokość wiersza\r\n    const rowStartX = -rowWidth / 2 + boxArgs[0] / 2; // Początkowa pozycja X wiersza\r\n    \r\n    console.log(\"rowWidth\")\r\n    console.log(rowWidth)\r\n    console.log(\"boxarguments\")\r\n    console.log(boxArgs[0])\r\n    console.log(boxArgs)\r\n    console.log(\"rowStartX\")\r\n    console.log(rowStartX)\r\n    console.log(\"height\")\r\n    console.log(height)\r\n    console.log(\"i\")\r\n    console.log(i)\r\n    \r\n    \r\n    for (let j = 0; j < height; j++) {\r\n      const posY = y + j * boxArgs[1]; // Obliczenie pozycji Y kostki\r\n      cubes.push(<Box key={`${i}-${j}`} x={x} y={posY} z={z} />);\r\n      console.log(x, posY, z);\r\n    }\r\n    \r\n    x += height * boxArgs[1]; // Inkrementacja y po dodaniu całego rzędu kostek\r\n  });\r\n\r\n  return {\r\n    elements: (\r\n      <>\r\n        {cubes}\r\n      </>\r\n    ),\r\n  };\r\n};\r\n\r\n\r\nconst Axes = () => {\r\n  const axesHelperRef = useRef<THREE.AxesHelper>(null);\r\n\r\n  useFrame((state) => {\r\n    if (axesHelperRef.current) {\r\n      axesHelperRef.current.scale.set(50, 50, 50);\r\n    }\r\n  });\r\n\r\n  return <axesHelper ref={axesHelperRef} args={[5]} />;\r\n};\r\n\r\nconst Scene = ({ surface }: Props) => {\r\n  const { elements } = Surface({ surface });\r\n  return (\r\n    <Canvas style={{ background: \"pink\" }}>\r\n      <ambientLight intensity={0.5} />\r\n      <pointLight position={[10, 10, 10]} />\r\n      console.log(elements)\r\n      <group>\r\n        {elements}\r\n      </group>\r\n      <Axes />\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}